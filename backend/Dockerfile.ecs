# Multi-stage build per ridurre dimensione finale
FROM ubuntu:22.04 AS builder

# Evita prompt interattivi durante installazione
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Aggiorna sistema e installa dipendenze base
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    unzip \
    xz-utils \
    zip \
    libglu1-mesa \
    clang \
    cmake \
    ninja-build \
    pkg-config \
    libgtk-3-dev \
    liblzma-dev \
    build-essential \
    python3 \
    python3-pip \
    python3-venv \
    nano \
    vim \
    htop \
    jq \
    ca-certificates \
    gnupg \
    lsb-release \
    && rm -rf /var/lib/apt/lists/*

# Installa Node.js 18.x
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Skip Docker for now - focus on Flutter + Python
# RUN echo "Docker support will be added in next iteration"

# Installa Flutter SDK
ENV FLUTTER_HOME="/opt/flutter"
ENV PATH="$FLUTTER_HOME/bin:$PATH"

RUN git clone --depth 1 --branch stable https://github.com/flutter/flutter.git $FLUTTER_HOME \
    && $FLUTTER_HOME/bin/flutter doctor \
    && $FLUTTER_HOME/bin/flutter precache \
    && chmod -R 755 $FLUTTER_HOME

# Stage finale ottimizzato
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Copia solo i binari necessari dal builder
COPY --from=builder /opt/flutter /opt/flutter
COPY --from=builder /usr/bin/python3 /usr/bin/python3
COPY --from=builder /usr/bin/pip3 /usr/bin/pip3

# Installa runtime essenziali + Node.js
RUN apt-get update && apt-get install -y \
    git \
    curl \
    wget \
    unzip \
    nano \
    vim \
    ca-certificates \
    libglu1-mesa \
    python3-distutils \
    && rm -rf /var/lib/apt/lists/*

# Installa Node.js 18.x
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Setup environment
ENV FLUTTER_HOME="/opt/flutter"
ENV PATH="$FLUTTER_HOME/bin:$PATH"
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Crea directory di lavoro
WORKDIR /workspace

# Copia il backend Express
COPY package*.json ./
RUN npm ci --only=production

COPY . .

# Configurazione per ECS
ENV PORT=3000
ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Espone la porta
EXPOSE 3000

# Avvia il server Express
CMD ["node", "ecs-server.js"]