# Warp Mobile AI IDE - Development Environment Container
# Supporta tutti i principali linguaggi e framework di sviluppo

FROM ubuntu:22.04

LABEL maintainer="Warp Mobile AI IDE"
LABEL description="Complete development environment with multi-language support"
LABEL version="1.0"

# Evitare prompt interattivi durante l'installazione
ENV DEBIAN_FRONTEND=noninteractive
ENV TERM=xterm-256color
ENV SHELL=/bin/bash

# Timezone
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Sistema di base e utilities
RUN apt-get update && apt-get install -y \
    # Build essentials
    build-essential \
    cmake \
    pkg-config \
    # Version control
    git \
    git-lfs \
    # Network tools
    curl \
    wget \
    openssh-client \
    # Editors
    vim \
    nano \
    # File management
    unzip \
    zip \
    tar \
    tree \
    # Process management
    htop \
    tmux \
    screen \
    # Development tools
    jq \
    # SSL/TLS
    ca-certificates \
    gnupg \
    lsb-release \
    # System info
    neofetch \
    # Networking
    telnet \
    netcat \
    && rm -rf /var/lib/apt/lists/*

# ===== NODE.JS & NPM =====
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Install yq (YAML processor)
RUN wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64 -O /usr/bin/yq \
    && chmod +x /usr/bin/yq

# Global npm packages essenziali
RUN npm install -g \
    # React ecosystem
    create-react-app \
    # Vue ecosystem
    @vue/cli \
    # Angular
    @angular/cli \
    # Development servers
    serve \
    live-server \
    http-server \
    # Build tools
    webpack-cli \
    rollup \
    parcel \
    # Package managers
    yarn \
    pnpm \
    # Development utilities
    nodemon \
    pm2 \
    concurrently \
    # Linting & formatting
    eslint \
    prettier \
    # Testing
    jest \
    # Other tools
    typescript \
    ts-node \
    express-generator

# ===== PYTHON =====
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    python3-setuptools \
    && rm -rf /var/lib/apt/lists/*

# Python packages essenziali
RUN pip3 install --upgrade pip && pip3 install \
    # Web frameworks
    django \
    flask \
    fastapi \
    uvicorn \
    gunicorn \
    # Data science
    pandas \
    numpy \
    matplotlib \
    seaborn \
    plotly \
    # Machine learning
    scikit-learn \
    tensorflow \
    torch \
    transformers \
    # Jupyter
    jupyter \
    jupyterlab \
    notebook \
    # Development tools
    black \
    flake8 \
    pytest \
    requests \
    # Package management
    pipenv \
    poetry

# ===== GO =====
ENV GO_VERSION=1.21.5
RUN wget https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz \
    && tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz \
    && rm go${GO_VERSION}.linux-amd64.tar.gz

ENV PATH=$PATH:/usr/local/go/bin
ENV GOPATH=/workspace/go
ENV PATH=$PATH:$GOPATH/bin

# Go tools essenziali
RUN go install golang.org/x/tools/gopls@latest \
    && go install github.com/air-verse/air@latest \
    && go install github.com/cosmtrek/air@latest

# ===== RUST =====
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
RUN rustup default stable \
    && rustup component add rustfmt clippy \
    && cargo install cargo-watch cargo-edit

# ===== JAVA & GRADLE =====
RUN apt-get update && apt-get install -y \
    openjdk-17-jdk \
    maven \
    && rm -rf /var/lib/apt/lists/*

# Gradle
ENV GRADLE_VERSION=8.5
RUN wget https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip \
    && unzip gradle-${GRADLE_VERSION}-bin.zip \
    && mv gradle-${GRADLE_VERSION} /opt/gradle \
    && rm gradle-${GRADLE_VERSION}-bin.zip

ENV PATH=$PATH:/opt/gradle/bin

# ===== PHP =====
RUN apt-get update && apt-get install -y \
    php8.1 \
    php8.1-cli \
    php8.1-common \
    php8.1-mysql \
    php8.1-zip \
    php8.1-gd \
    php8.1-mbstring \
    php8.1-curl \
    php8.1-xml \
    php8.1-bcmath \
    composer \
    && rm -rf /var/lib/apt/lists/*

# ===== RUBY =====
RUN apt-get update && apt-get install -y \
    ruby-full \
    ruby-bundler \
    && rm -rf /var/lib/apt/lists/*

RUN gem install rails sinatra

# ===== FLUTTER & DART =====
ENV FLUTTER_VERSION=3.16.5
RUN wget https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${FLUTTER_VERSION}-stable.tar.xz \
    && tar xf flutter_linux_${FLUTTER_VERSION}-stable.tar.xz \
    && mv flutter /opt/flutter \
    && rm flutter_linux_${FLUTTER_VERSION}-stable.tar.xz

ENV PATH="$PATH:/opt/flutter/bin"
ENV PATH="$PATH:/opt/flutter/bin/cache/dart-sdk/bin"

# Android SDK (per Flutter)
ENV ANDROID_HOME=/opt/android-sdk
ENV PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools

RUN mkdir -p $ANDROID_HOME \
    && wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip \
    && unzip commandlinetools-linux-9477386_latest.zip -d $ANDROID_HOME \
    && rm commandlinetools-linux-9477386_latest.zip

# ===== DOCKER IN DOCKER =====
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list \
    && apt-get update \
    && apt-get install -y docker-ce-cli docker-compose-plugin \
    && rm -rf /var/lib/apt/lists/*

# ===== DATABASES =====
RUN apt-get update && apt-get install -y \
    # SQLite
    sqlite3 \
    # PostgreSQL client
    postgresql-client \
    # MySQL client
    mysql-client \
    # Redis client
    redis-tools \
    # MongoDB tools
    mongodb-clients \
    && rm -rf /var/lib/apt/lists/*

# ===== KUBERNETES TOOLS =====
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \
    && install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl \
    && rm kubectl

# Helm
RUN curl https://get.helm.sh/helm-v3.13.0-linux-amd64.tar.gz | tar xz \
    && mv linux-amd64/helm /usr/local/bin/ \
    && rm -rf linux-amd64

# ===== CLOUD CLI TOOLS =====
# AWS CLI
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
    && unzip awscliv2.zip \
    && ./aws/install \
    && rm -rf aws awscliv2.zip

# Google Cloud SDK
RUN curl https://sdk.cloud.google.com | bash
ENV PATH=$PATH:/root/google-cloud-sdk/bin

# Azure CLI
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash

# ===== TERRAFORM =====
ENV TERRAFORM_VERSION=1.6.0
RUN wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip \
    && unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip \
    && mv terraform /usr/local/bin/ \
    && rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip

# ===== GIT CONFIGURATION =====
RUN git config --global init.defaultBranch main \
    && git config --global color.ui auto \
    && git config --global core.editor nano

# ===== WORKSPACE SETUP =====
WORKDIR /workspace

# Crea struttura directories comuni
RUN mkdir -p /workspace/{projects,temp,scripts,config} \
    && mkdir -p /workspace/projects/{web,mobile,backend,fullstack,data-science} \
    && mkdir -p /root/.config

# ===== ENVIRONMENT CUSTOMIZATION =====
# Bash configuration con prompt personalizzato
RUN echo 'export PS1="\[\033[01;32m\]warp-dev\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "' >> /root/.bashrc \
    && echo 'alias ll="ls -alF"' >> /root/.bashrc \
    && echo 'alias la="ls -A"' >> /root/.bashrc \
    && echo 'alias l="ls -CF"' >> /root/.bashrc \
    && echo 'alias ..="cd .."' >> /root/.bashrc \
    && echo 'alias ...="cd ../.."' >> /root/.bashrc \
    && echo 'alias gs="git status"' >> /root/.bashrc \
    && echo 'alias gd="git diff"' >> /root/.bashrc \
    && echo 'alias gc="git commit"' >> /root/.bashrc \
    && echo 'alias gp="git push"' >> /root/.bashrc \
    && echo 'alias gl="git log --oneline"' >> /root/.bashrc

# Welcome message
RUN echo 'echo "🚀 Welcome to Warp Mobile AI IDE Development Environment!"' >> /root/.bashrc \
    && echo 'echo "📦 Available tools: Node.js, Python, Go, Rust, Java, PHP, Ruby, Flutter, Docker"' >> /root/.bashrc \
    && echo 'echo "🌐 Start a development server and it will be automatically exposed for preview"' >> /root/.bashrc \
    && echo 'echo "💡 Try: npm create vite@latest my-app, flutter create my_app, or django-admin startproject mysite"' >> /root/.bashrc \
    && echo 'echo ""' >> /root/.bashrc

# ===== HEALTH CHECK =====
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# ===== PORTS =====
EXPOSE 3000 3001 4200 5000 8000 8080 8888 9000

# ===== ENTRYPOINT =====
# Mantieni il container in esecuzione
CMD ["/bin/bash", "-l"]